<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Reactive.PlatformServices</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.Concurrency.EventLoopScheduler">
            <summary>
            Represents an object that schedules units of work on a designated thread.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.#ctor">
            <summary>
            Creates an object that schedules units of work on a designated thread.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.#ctor(System.Func{System.Threading.ThreadStart,System.Threading.Thread})">
            <summary>
            Creates an object that schedules units of work on a designated thread.
            </summary>
            <param name="threadFactory">Factory function for thread creation.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.StartStopwatch">
            <summary>
            Gets a new stopwatch object.
            </summary>
            <returns>New stopwatch object; started at the time of the request.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.Dispose">
            <summary>
            Ends the thread associated with this scheduler.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.NewThreadScheduler">
            <summary>
            Represents an object that schedules each unit of work on a separate thread.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.#ctor">
            <summary>
            Creates an object that schedules each unit of work on a separate thread.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.#ctor(System.Func{System.Threading.ThreadStart,System.Threading.Thread})">
            <summary>
            Creates an object that schedules each unit of work on a separate thread.
            </summary>
            <param name="threadFactory">Factory function for thread creation.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
            <summary>
            Schedules a long-running task by creating a new thread. Cancellation happens through polling.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.StartStopwatch">
            <summary>
            Gets a new stopwatch object.
            </summary>
            <returns>New stopwatch object; started at the time of the request.</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.NewThreadScheduler.Default">
            <summary>
            Gets an instance of this scheduler that uses the default Thread constructor.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ThreadPoolScheduler">
            <summary>
            Represents an object that schedules units of work on the CLR threadpool.
            </summary>
            <seealso cref="P:System.Reactive.Concurrency.ThreadPoolScheduler.Instance">Singleton instance of this type exposed through this static property.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime, using a System.Threading.Timer object.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
            <summary>
            Schedules a long-running task by creating a new thread. Cancellation happens through polling.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.StartStopwatch">
            <summary>
            Gets a new stopwatch object.
            </summary>
            <returns>New stopwatch object; started at the time of the request.</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.ThreadPoolScheduler.Instance">
            <summary>
            Gets the singleton instance of the CLR threadpool scheduler.
            </summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.PlatformEnlightenmentProvider">
            <summary>
            (Infrastructure) Provider for platform-specific framework enlightenments.
            </summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.PlatformEnlightenmentProvider.GetService``1(System.Object[])">
            <summary>
            (Infastructure) Tries to gets the specified service.
            </summary>
            <typeparam name="T">Service type.</typeparam>
            <param name="args">Optional set of arguments.</param>
            <returns>Service instance or null if not found.</returns>
        </member>
    </members>
</doc>
