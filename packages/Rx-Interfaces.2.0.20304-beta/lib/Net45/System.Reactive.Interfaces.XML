<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Reactive.Interfaces</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.Concurrency.IStopwatchProvider">
            <summary>
            Provider for IStopwatch objects.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.IStopwatchProvider.StartStopwatch">
            <summary>
            Gets a new stopwatch object.
            </summary>
            <returns>New stopwatch object; started at the time of the request.</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.IScheduledItem`1">
            <summary>
            Represents a work item that has been scheduled.
            </summary>
            <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduledItem`1.Invoke">
            <summary>
            Invokes the work item.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.IScheduledItem`1.DueTime">
            <summary>
            Get the absolute time at which the item executes.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.IScheduler">
            <summary>
            Represents an object that schedules units of work.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed after dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Relative time after which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>
            Schedules an action to be executed at dueTime.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <param name="dueTime">Absolute time at which to execute the action.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.IScheduler.Now">
            <summary>
            Gets the scheduler's notion of current time.
            </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ISchedulerLongRunning">
            <summary>
            Scheduler with support for starting long-running tasks.
            This type of scheduler can be used to run loops more efficiently instead of using recursive scheduling.
            </summary>
        </member>
        <member name="M:System.Reactive.Concurrency.ISchedulerLongRunning.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
            <summary>
            Schedules a long-running piece of work.
            </summary>
            <param name="state">State passed to the action to be executed.</param>
            <param name="action">Action to be executed.</param>
            <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.IStopwatch">
            <summary>
            Abstraction for a stopwatch to compute time relative to a starting point.
            </summary>
        </member>
        <member name="P:System.Reactive.Concurrency.IStopwatch.Elapsed">
            <summary>
            Gets the time elapsed since the stopwatch object was obtained.
            </summary>
        </member>
        <member name="T:System.Reactive.Disposables.ICancelable">
            <summary>
            Disposable resource with state tracking.
            </summary>
        </member>
        <member name="P:System.Reactive.Disposables.ICancelable.IsDisposed">
            <summary>
            Gets a value that indicates whether the operation was cancelled.
            </summary>
        </member>
        <member name="T:System.Reactive.IEventPattern`2">
            <summary>
            Represents the Sender and EventArgs values of a .NET event.
            </summary>
        </member>
        <member name="P:System.Reactive.IEventPattern`2.Sender">
            <summary>
            Gets the sender value of the event.
            </summary>
        </member>
        <member name="P:System.Reactive.IEventPattern`2.EventArgs">
            <summary>
            Gets the event arguments value of the event.
            </summary>
        </member>
        <member name="T:System.Reactive.IEventPatternSource`1">
            <summary>
            Represents a data stream signaling its elements by means of an event.
            </summary>
            <typeparam name="TEventArgs">Event arguments type.</typeparam>
        </member>
        <member name="E:System.Reactive.IEventPatternSource`1.OnNext">
            <summary>
            Event signaling the next element in the data stream.
            </summary>
        </member>
        <member name="T:System.Reactive.IEventSource`1">
            <summary>
            Represents a data stream signaling its elements by means of an event.
            </summary>
            <typeparam name="T">Event arguments type.</typeparam>
        </member>
        <member name="E:System.Reactive.IEventSource`1.OnNext">
            <summary>
            Event signaling the next element in the data stream.
            </summary>
        </member>
        <member name="T:System.Reactive.IObserver`2">
            <summary>
            Supports push-style iteration over an observable sequence.
            </summary>
        </member>
        <member name="M:System.Reactive.IObserver`2.OnNext(`0)">
            <summary>
            Notifies the observer of a new value in the sequence.
            </summary>
            <returns>Result returned upon observation of a new value.</returns>
        </member>
        <member name="M:System.Reactive.IObserver`2.OnError(System.Exception)">
            <summary>
            Notifies the observer that an exception has occurred.
            </summary>
            <returns>Result returned upon observation of an error.</returns>
        </member>
        <member name="M:System.Reactive.IObserver`2.OnCompleted">
            <summary>
            Notifies the observer of the end of the sequence.
            </summary>
            <returns>Result returned upon observation of the sequence completion.</returns>
        </member>
        <member name="T:System.Reactive.Linq.IGroupedObservable`2">
            <summary>
            Represents an observable sequence of values that have a common key.
            </summary>
        </member>
        <member name="P:System.Reactive.Linq.IGroupedObservable`2.Key">
            <summary>
            Gets the common key.
            </summary>
        </member>
        <member name="T:System.Reactive.Linq.IQbservable`1">
            <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.
            </summary>
        </member>
        <member name="T:System.Reactive.Linq.IQbservable">
            <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.
            </summary>
        </member>
        <member name="P:System.Reactive.Linq.IQbservable.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of IQbservable is executed.
            </summary>
        </member>
        <member name="P:System.Reactive.Linq.IQbservable.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of IQbservable.
            </summary>
        </member>
        <member name="P:System.Reactive.Linq.IQbservable.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
        </member>
        <member name="T:System.Reactive.Linq.IQbservableProvider">
            <summary>
            Defines methods to create and execute queries that are described by an IQbservable object.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.IQbservableProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an IQbservable&gt;TResult&lt; object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">Expression tree representing the query.</param>
            <returns>IQbservable object that can evaluate the given query expression.</returns>
        </member>
        <member name="T:System.Reactive.Subjects.IConnectableObservable`1">
            <summary>
            Represents an observable that can be connected and disconnected.
            </summary>
        </member>
        <member name="M:System.Reactive.Subjects.IConnectableObservable`1.Connect">
            <summary>
            Connects the observable.
            </summary>
            <returns>IDisposable object used to disconnect the observable.</returns>
        </member>
        <member name="T:System.Reactive.Subjects.ISubject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
        </member>
        <member name="T:System.Reactive.Subjects.ISubject`2">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
        </member>
    </members>
</doc>
